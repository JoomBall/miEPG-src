name: miEPG-merge-uid-split (to public mirror)

on:
  workflow_dispatch:
  schedule:
    # UTC → 09:05, 13:05, 17:05, 21:05 Europa/Madrid aprox.
    - cron: "5 7,11,15,19 * * *"

concurrency:
  group: miEPG-build
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup tools
        run: |
          sudo apt-get update
          sudo apt-get install -y php-cli curl gzip
          echo "== Árbol raíz (primeros niveles) =="
          find . -maxdepth 2 -type f | sed -n '1,120p'

      - name: Normalizar finales de línea
        run: |
          sed -i 's/\r$//' epgs.txt 2>/dev/null || true
          sed -i 's/\r$//' canales.txt 2>/dev/null || true
          sed -i 's/\r$//' countries/es/allowlist.txt 2>/dev/null || true
          sed -i 's/\r$//' countries/gb/allowlist.txt 2>/dev/null || true

      - name: Verificar rutas fijas
        run: |
          test -f .github/workflows/EPG_script.sh || { echo "Falta .github/workflows/EPG_script.sh"; exit 20; }
          test -f epgs.txt || { echo "Falta epgs.txt en la raíz"; exit 10; }
          test -f canales.txt || { echo "Falta canales.txt en la raíz"; exit 11; }
          echo "== epgs.txt (primeras líneas) =="; sed -n '1,50p' epgs.txt || true
          echo "== canales.txt (primeras líneas) =="; sed -n '1,50p' canales.txt || true

      - name: Probar URLs de epgs.txt (HEAD)
        run: |
          echo "=== PROBANDO FUENTES ==="
          while IFS= read -r u; do
            u="${u%%#*}"; u="$(echo -n "$u" | xargs || true)"
            [ -z "$u" ] && continue
            echo "--- $u"
            curl -I --max-time 25 "$u" || true
          done < epgs.txt

      - name: Build combined EPG (ruta fija del script)
        env:
          # IMPORTANTe: indicamos al script dónde están los archivos y la salida
          EPGS_FILE: ${{ github.workspace }}/epgs.txt
          CHANNELS_FILE: ${{ github.workspace }}/canales.txt
          OUTPUT: ${{ github.workspace }}/miEPG.xml
        run: |
          set -euo pipefail
          bash -x .github/workflows/EPG_script.sh
          echo "== XML tras merge =="
          find . -maxdepth 1 -type f -name "*.xml" -ls || true
          test -s miEPG.xml || { echo "miEPG.xml no se generó (revisa epgs/canales y coincidencias de IDs)"; exit 22; }
          mv -f miEPG.xml miEPG_ALL.xml
          echo "=== Cabecera miEPG_ALL.xml ==="
          head -n 8 miEPG_ALL.xml || true
          echo "=== IDs de canales (muestra) ==="
          grep -oP '<channel id="[^"]+"' miEPG_ALL.xml | head -n 50 || true

      - name: Comprobar herramientas PHP
        run: |
          test -f tools/xmltv_add_uid.php   || { echo "Falta tools/xmltv_add_uid.php"; exit 30; }
          test -f tools/xmltv_split.php     || { echo "Falta tools/xmltv_split.php"; exit 31; }

      - name: Add ext:uid
        run: |
          php tools/xmltv_add_uid.php miEPG_ALL.xml miEPG_ALL_uid.xml
          test -s miEPG_ALL_uid.xml || { echo "Falta miEPG_ALL_uid.xml"; exit 23; }
          grep -m1 -n "<ext:uid>" miEPG_ALL_uid.xml || true

      - name: Split ES
        run: |
          if [ -f countries/es/allowlist.txt ]; then
            echo "== allowlist ES =="; sed -n '1,120p' countries/es/allowlist.txt || true
            php tools/xmltv_split.php miEPG_ALL_uid.xml countries/es/allowlist.txt miEPG_ES.xml || true
            [ -s miEPG_ES.xml ] && echo "OK ES: $(wc -c < miEPG_ES.xml) bytes" || echo "WARNING: ES vacío"
          else
            echo "No hay countries/es/allowlist.txt; saltando split ES"
          fi

      - name: Split GB
        run: |
          if [ -f countries/gb/allowlist.txt ]; then
            echo "== allowlist GB =="; sed -n '1,120p' countries/gb/allowlist.txt || true
            php tools/xmltv_split.php miEPG_ALL_uid.xml countries/gb/allowlist.txt miEPG_GB.xml || true
            [ -s miEPG_GB.xml ] && echo "OK GB: $(wc -c < miEPG_GB.xml) bytes" || echo "WARNING: GB vacío"
          else
            echo "No hay countries/gb/allowlist.txt; saltando split GB"
          fi

      - name: Subir artefactos XML (para depurar)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xml-out
          path: |
            miEPG_ALL.xml
            miEPG_ALL_uid.xml
            miEPG_ES.xml
            miEPG_GB.xml
          if-no-files-found: warn

      - name: Verify publish auth
        env:
          GH_USER: "JoomBall"      # <--- cambia si tu usuario es otro
          GH_REPO: "miEPG-pub"
          PUSH_TOKEN: ${{ secrets.PUSH_TOKEN }}
        run: |
          set -e
          git ls-remote https://x-access-token:${PUSH_TOKEN}@github.com/${GH_USER}/${GH_REPO}.git HEAD
          echo "Auth OK contra ${GH_USER}/${GH_REPO}"

      - name: Publish to public mirror
        env:
          GH_USER: "JoomBall"      # <--- cambia si tu usuario es otro
          GH_REPO: "miEPG-pub"
          PUSH_TOKEN: ${{ secrets.PUSH_TOKEN }}
        run: |
          set -e
          git config --global user.name  "github-actions"
          git config --global user.email "actions@users.noreply.github.com"
          git clone https://x-access-token:${PUSH_TOKEN}@github.com/${GH_USER}/${GH_REPO}.git pub
          cp -f miEPG_ALL.xml miEPG_ALL_uid.xml pub/ || true
          [ -f miEPG_ES.xml ] && cp -f miEPG_ES.xml pub/ || true
          [ -f miEPG_GB.xml ] && cp -f miEPG_GB.xml pub/ || true
          cd pub
          git add -A
          git commit -m "update $(date -u +%Y-%m-%dT%H:%M:%SZ')" || echo "Sin cambios"
          git push
