name: miEPG per-country

on:
  workflow_dispatch:
  schedule:
    - cron: '5 6,12,18 * * *'  # varias veces al día (UTC)

concurrency:
  group: miEPG-per-country
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        country: [es, gb]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gzip php-cli

      - name: Compute COUNTRY_UP (ES/GB)
        run: |
          echo "COUNTRY_UP=$(echo '${{ matrix.country }}' | tr '[:lower:]' '[:upper:]')" >> $GITHUB_ENV

      - name: Mostrar listas del país (si existen)
        run: |
          set -e
          echo "== País: ${{ matrix.country }} =="
          if [ -f "countries/${{ matrix.country }}/epgs.txt" ]; then
            echo "-- epgs.txt"; sed -n '1,80p' countries/${{ matrix.country }}/epgs.txt
          else
            echo "NO existe countries/${{ matrix.country }}/epgs.txt"
          fi
          if [ -f "countries/${{ matrix.country }}/canales.txt" ]; then
            echo "-- canales.txt"; sed -n '1,80p' countries/${{ matrix.country }}/canales.txt
          else
            echo "NO existe countries/${{ matrix.country }}/canales.txt"
          fi

      - name: Debug fuentes (HTTP + programmes)
        run: |
          set -e
          FILE="countries/${{ matrix.country }}/epgs.txt"
          [ -f "$FILE" ] || { echo "No existe $FILE"; exit 0; }
          while IFS= read -r u; do
            [ -z "$u" ] && continue
            echo "=== Probando: $u"
            # Cabeceras (HTTP code)
            curl -I -A "Mozilla/5.0" -s "$u" | head -n 1 || true
            # Descarga + (si .gz) descompresión
            if echo "$u" | grep -qiE '\.gz($|\?)'; then
              curl -A "Mozilla/5.0" -fsSL "$u" | gzip -dc > /tmp/epg_test.xml || true
            else
              curl -A "Mozilla/5.0" -fsSL "$u" > /tmp/epg_test.xml || true
            fi
            echo "Programmes: $(grep -c '<programme' /tmp/epg_test.xml || echo 0)"
          done < "$FILE"

      - name: Build EPG (país)
        env:
          EPGS_FILE: ${{ github.workspace }}/countries/${{ matrix.country }}/epgs.txt
          CHANNELS_FILE: ${{ github.workspace }}/countries/${{ matrix.country }}/canales.txt
          OUTPUT: ${{ github.workspace }}/miEPG_${{ env.COUNTRY_UP }}.xml
          COUNTRY: ${{ matrix.country }}
          ALLOW_EMPTY: "1"
        run: |
          chmod +x .github/workflows/EPG_script.sh
          bash -x .github/workflows/EPG_script.sh || true
          if [ -s "miEPG_${{ env.COUNTRY_UP }}.xml" ]; then
            echo "OK: generado miEPG_${{ env.COUNTRY_UP }}.xml"
          else
            echo "INFO: no se generó XML para ${{ matrix.country }} (se permite vacío)."
          fi

      - name: Validar/Sanear XML ES (antes de post-proceso)
        if: ${{ matrix.country == 'es' }}
        run: |
          if [ ! -s "miEPG_ES.xml" ]; then
            echo "No existe miEPG_ES.xml"; exit 0
          fi
          sudo apt-get update && sudo apt-get install -y libxml2-utils
          echo "Bytes: $(wc -c < miEPG_ES.xml)"
          if ! xmllint --noout --encode UTF-8 miEPG_ES.xml; then
            echo "⚠️  XML inválido; intento de recuperación…"
            xmllint --recover --encode UTF-8 miEPG_ES.xml > miEPG_ES.recovered.xml || true
            mv -f miEPG_ES.recovered.xml miEPG_ES.xml
          fi
          # Verificación mínima
          PRG=$(grep -c '<programme ' miEPG_ES.xml || echo 0)
          if [ "$PRG" -eq 0 ]; then
            echo "❌ XML sin <programme> tras recuperar. Cabecera y cola:"
            head -n 60 miEPG_ES.xml || true
            tail -n 60 miEPG_ES.xml || true
            exit 3
          fi
          echo "OK: XML válido con $PRG programmes."


      - name: Post-proceso ES (UID + limpiar desc + categorías)
        if: ${{ matrix.country == 'es' }}
        run: |
          set -e
          if [ ! -s "miEPG_ES.xml" ]; then
            echo "miEPG_ES.xml no existe o está vacío; omito post-proceso."
            exit 0
          fi

          echo "Comprobando ruta de scripts..."
          ls -la .github/scripts || true
          test -f .github/scripts/postprocess_es.php || { echo "ERROR: Falta .github/scripts/postprocess_es.php"; exit 1; }

          echo "Copia previa para diff…"
          cp -f miEPG_ES.xml miEPG_ES.pre.xml

          echo "ANTES: episodios con jb_uid:"
          (grep -c 'episode-num system="jb_uid"' miEPG_ES.xml || true)

          echo "Ejecutando postprocess_es.php…"
          php -v
          php .github/scripts/postprocess_es.php miEPG_ES.xml miEPG_ES.tmp.xml

          echo "DESPUÉS (tmp): episodios con jb_uid:"
          (grep -c 'episode-num system="jb_uid"' miEPG_ES.tmp.xml || true)

          echo "Sustituyendo fichero…"
          mv -f miEPG_ES.tmp.xml miEPG_ES.xml

          CNT=$(grep -c 'episode-num system="jb_uid"' miEPG_ES.xml || echo 0)
          echo "UIDs añadidos (conteo total): $CNT"
          if [ "$CNT" -eq 0 ]; then
            echo "ERROR: No se añadió ningún jb_uid; revisa el script de postproceso."
            echo "Mostrando primeras líneas del XML resultante:"
            head -n 60 miEPG_ES.xml || true
            exit 2
          fi

          echo "Diff (abreviado) entre pre y post:"
          # Muestra solo los primeros 3000 caracteres del diff para no saturar logs
          (diff -u miEPG_ES.pre.xml miEPG_ES.xml || true) | head -c 3000
          echo
          echo "OK: Post-proceso aplicado."

      - name: Filtro allowlist ES (solo canales españoles)
        if: ${{ matrix.country == 'es' }}
        run: |
          if [ -s "miEPG_ES.xml" ] && [ -s "countries/es/allowlist.txt" ]; then
            php .github/scripts/filter_allowlist.php miEPG_ES.xml countries/es/allowlist.txt miEPG_ES.filtered.xml
            mv -f miEPG_ES.filtered.xml miEPG_ES.xml
            echo "Allowlist ES aplicado."
            # sanity: mostrar conteos
            echo "Channels ES: $(grep -c '<channel ' miEPG_ES.xml || echo 0)"
            echo "Programmes ES: $(grep -c '<programme ' miEPG_ES.xml || echo 0)"
          else
            echo "Saltando allowlist (no hay XML o no hay countries/es/allowlist.txt)."
          fi

      - name: Subir artefacto del país
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xml-${{ matrix.country }}
          path: miEPG_${{ env.COUNTRY_UP }}.xml
          if-no-files-found: ignore

      - name: Publish to public mirror (si hay XML)
        if: always()
        env:
          GH_USER: JoomBall
          GH_REPO: miEPG-pub
          PUSH_TOKEN: ${{ secrets.PUSH_TOKEN }}
          OUTFILE: miEPG_${{ env.COUNTRY_UP }}.xml
          SUBDIR: ${{ matrix.country }}     # es / gb
        run: |
          set -e
          echo "OUTFILE=$OUTFILE"
          if [ ! -s "$OUTFILE" ]; then
            echo "No hay OUTFILE con contenido; salto publicación."
            exit 0
          fi
          if [ -z "$PUSH_TOKEN" ]; then
            echo "Sin PUSH_TOKEN; salto publicación."
            exit 0
          fi

          git config --global user.name "github-actions"
          git config --global user.email "actions@users.noreply.github.com"

          echo "Clonando destino: https://github.com/${GH_USER}/${GH_REPO}.git"
          git clone --depth 1 https://x-access-token:${PUSH_TOKEN}@github.com/${GH_USER}/${GH_REPO}.git pub
          echo "Árbol inicial de 'pub/':"
          ls -la pub || true

          mkdir -p "pub/${SUBDIR}"
          cp -f "$OUTFILE" "pub/${SUBDIR}/"
          echo "Archivo copiado a pub/${SUBDIR}/$(basename "$OUTFILE")"
          ls -la "pub/${SUBDIR}" || true

          cd pub
          git add -A
          echo "git status tras add:"
          git status

          # Si no hay cambios (archivo idéntico), no pasa nada
          if git diff --cached --quiet; then
            echo "No hay cambios que commitear (probablemente mismo contenido)."
            exit 0
          fi

          git commit -m "update ${SUBDIR} $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          git push origin HEAD:main




